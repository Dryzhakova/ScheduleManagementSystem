// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppsMoodle.Models;

#nullable disable

namespace WebAppsMoodle.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241207185744_AddToken")]
    partial class AddToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("WebAppsMoodle.Models.Campus", b =>
                {
                    b.Property<string>("Campusid")
                        .HasColumnType("TEXT");

                    b.Property<string>("CampusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Campusid");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.CanceledRecurringClass", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassesId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassesId");

                    b.ToTable("CanceledRecurringClasses");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.Classes", b =>
                {
                    b.Property<string>("ClassesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassesDescriptionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassesId");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassesDescriptionId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.ClassesDescription", b =>
                {
                    b.Property<string>("ClassesDescriptionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClassesDescriptionId");

                    b.ToTable("ClassesDescription");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.OneTimeClassDate", b =>
                {
                    b.Property<string>("OneTimeClassDateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassesId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("OneTimeClassEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OneTimeClassFullDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("OneTimeClassStartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("OneTimeClassDateId");

                    b.HasIndex("ClassesId");

                    b.ToTable("OneTimeClasses");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.RecurringClassDate", b =>
                {
                    b.Property<string>("RecurringClassDateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassesId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEven")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEveryWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecurrenceDay")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("RecurrenceEndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("RecurrenceStartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("RecurringClassDateId");

                    b.HasIndex("ClassesId");

                    b.ToTable("RecurringClasses");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.Room", b =>
                {
                    b.Property<string>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.Teacher", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.UserToken", b =>
                {
                    b.Property<string>("TokenId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TokenId");

                    b.HasIndex("TeacherID");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.CanceledRecurringClass", b =>
                {
                    b.HasOne("WebAppsMoodle.Models.Classes", "Class")
                        .WithMany("CanceledRecurrClass")
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.Classes", b =>
                {
                    b.HasOne("WebAppsMoodle.Models.Campus", "Campus")
                        .WithMany("Classes")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppsMoodle.Models.ClassesDescription", "ClassesDescription")
                        .WithMany("Classes")
                        .HasForeignKey("ClassesDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppsMoodle.Models.Room", "Room")
                        .WithMany("Classes")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppsMoodle.Models.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("ClassesDescription");

                    b.Navigation("Room");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.OneTimeClassDate", b =>
                {
                    b.HasOne("WebAppsMoodle.Models.Classes", null)
                        .WithMany("OneTimeClassDates")
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppsMoodle.Models.RecurringClassDate", b =>
                {
                    b.HasOne("WebAppsMoodle.Models.Classes", "Classes")
                        .WithMany("RecurringClassDates")
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classes");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.UserToken", b =>
                {
                    b.HasOne("WebAppsMoodle.Models.Teacher", "teacher")
                        .WithMany("UserTokens")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.Campus", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.Classes", b =>
                {
                    b.Navigation("CanceledRecurrClass");

                    b.Navigation("OneTimeClassDates");

                    b.Navigation("RecurringClassDates");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.ClassesDescription", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.Room", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("WebAppsMoodle.Models.Teacher", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
